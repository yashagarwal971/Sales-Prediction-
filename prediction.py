# -*- coding: utf-8 -*-
"""capstone.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DV_w98I-YVcBj1SpExRhcOAjcHG3iRAe
"""

#!pip install plotly_express
#!pip install chart_studio
import numpy as np
from sklearn import linear_model
import pandas as pd
import plotly

import plotly_express as px
from sklearn.tree import DecisionTreeRegressor
import csv
import chart_studio.plotly as py
#from xgboost import XGBClassifier


#sign in plotly
py.sign_in("monika2310","hY1AGsTUAtloR3qV6x1d")
# set all the data to 2 decimal
pd.set_option("display.float.format", lambda x: "%.2f" % x)
#ignore warning message 
#warnings.filterwarnings("ignore")

def data_selection(df,i,j):
    df = pd.merge(country_list, df, left_on = "Country Code", right_on = "Country Code", how="left")
    df = df.set_index('Country Name')
    df_new = pd.concat([df["Country Code"],df.loc[:,i:j]], axis=1)
    df_new = df_new.fillna(0)
    return df_new
def reshape_data(df):
    df_new = df[:] 
    df_new.set_index(["Country Code"], inplace = True, append = True)
    df_new = df_new.stack()
    df_new = pd.DataFrame(df_new)
    df_new = df_new.reset_index()
    df_new = df_new.rename(columns = {"level_2":"Year",0:"Amount"})
    return df_new

def predictions_LR_DT(group_data,topic,new_years):
  data_new_a=[]
  data_new_b=[]
  for i in range(len(group_data)):
    val=set(group_data[i][1]['Country Name'])
    for k in val:val2=k
    val3=set(inbound_tourists_stack.loc[inbound_tourists_stack['Country Name'] == k, 'Country Code'])
    if val3:
      for m in val3:val4=m
    else:val4=0  

    data_year=np.array(group_data[i][1]['Year']).reshape((-1, 1))
    data_new_years=np.array(new_years).reshape((-1, 1))
    y_val=group_data[i][1][topic]
    reg_LR = linear_model.LinearRegression()
    reg_LR.fit(data_year,y_val)
    result_LR=reg_LR.predict(data_new_years)

    reg_DT = DecisionTreeRegressor()
    reg_DT.fit(data_year, y_val)
    result_DT = reg_DT.predict(data_new_years)
    for j in range(len(new_years)):
      data_new_a.append([val2,val4,new_years[j],result_LR[j]])
      data_new_b.append([val2,val4,new_years[j],result_DT[j]])
  return data_new_a,data_new_b

inbound_tourists = pd.read_excel("travel_data.xls", sheet_name="number_of_arrival", header=3, index_col=0)
country_list = pd.read_excel("travel_data.xls", sheet_name="country code")
outbound_tourists=pd.read_excel("travel_data.xls", sheet_name="number_of_departure", header=3, index_col=0)
gdp = pd.read_excel("travel_data.xls", sheet_name="GDP", header=3, index_col=0)

inbound_tourists_clean = data_selection(inbound_tourists,'2007','2017')
inbound_tourists_stack = reshape_data(inbound_tourists_clean)

gdp = gdp.loc[:,"2007":"2017"]
gdp_data = pd.DataFrame(gdp.stack()).reset_index()
gdp_data = gdp_data.rename(columns = {"level_1":"Year", 0:"GDP"})

outbound = outbound_tourists.loc[:,"2007":"2017"]
outbound_data = pd.DataFrame(outbound.stack()).reset_index()
outbound_data = outbound_data.rename(columns = {"level_1":"Year", 0:"Outbound"})

new_years=[2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028]
grouped_data=list(inbound_tourists_stack.groupby('Country Name',axis=0))
grouped_data1=list(gdp_data.groupby('Country Name',axis=0))
grouped_data2=list(outbound_data.groupby('Country Name',axis=0))

def new_files(col_val,file_name,data):
  fields = ["Country Name", 'Country Code','Year', col_val] 
  with open(file_name+'.csv', 'w') as f:  
    write = csv.writer(f)   
    write.writerow(fields)
    write.writerows(data)

group_data_list=[grouped_data,grouped_data1,grouped_data2]
topic_list=['Amount','GDP','Outbound']
file_names=['predictions_INB_LR','predictions_INB_DT','predictions_GDP_LR',
            'predictions_GDP_DT','predictions_OUT_LR','predictions_OUT_DT']
for i in [0,1,2]:
  LR_data,DT_data=predictions_LR_DT(group_data_list[i],topic_list[i],new_years)
  
  new_files(topic_list[i],file_names[i*2],LR_data)
  new_files(topic_list[i],file_names[i*2+1],DT_data)

predicted_INB_LR=pd.read_csv('predictions_INB_LR.csv')
predicted_INB_DT=pd.read_csv('predictions_INB_DT.csv')
predicted_GDP_LR=pd.read_csv('predictions_GDP_LR.csv')
predicted_GDP_DT=pd.read_csv('predictions_GDP_DT.csv')
predicted_OUT_LR=pd.read_csv('predictions_OUT_LR.csv')
predicted_OUT_DT=pd.read_csv('predictions_OUT_DT.csv')

inbound_tourists_new = pd.read_csv("predictions_INB_LR.csv")
gdp_new = pd.read_csv("predictions_GDP_LR.csv")
outbound_tourists_new=pd.read_csv("predictions_OUT_LR.csv")
gdp_inbound = inbound_tourists_new.merge(gdp_new, left_on=("Country Name","Year"), right_on=("Country Name","Year"))
gdp_outbound = outbound_tourists_new.merge(gdp_new, left_on=("Country Name","Year"), right_on=("Country Name","Year"))

inbound_map_pred = px.choropleth(predicted_INB_LR, 
                            locations="Country Code", 
                            color="Amount", 
                            hover_name="Country Name",
                            animation_frame="Year",
                            color_continuous_scale=px.colors.sequential.BuGn,
                            projection="natural earth")
inbound_map_pred
#py.plot(inbound_map_pred)
#plotly.offline.plot(inbound_map_pred, filename="inbound_map_pred")

GDP_map_pred = px.choropleth(predicted_GDP_LR, 
                            locations="Country Code", 
                            color="GDP", 
                            hover_name="Country Name",
                            animation_frame="Year",
                            color_continuous_scale=px.colors.sequential.BuGn,
                            projection="natural earth")
GDP_map_pred
#py.plot(GDP_map_pred)
#plotly.offline.plot(GDP_map_pred, filename="GDP_map_pred")

outbound_map_pred = px.choropleth(predicted_OUT_LR, 
                            locations="Country Code", 
                            color="Outbound", 
                            hover_name="Country Name",
                            animation_frame="Year",
                            color_continuous_scale=px.colors.sequential.BuGn,
                            projection="natural earth")
outbound_map_pred
#py.plot(outbound_map_pred)
#plotly.offline.plot(outbound_map_pred, filename="outbound_map_pred")

gdp_inbound_plot_pred = px.scatter(gdp_inbound, 
                              x="Amount", 
                              y="GDP",
                              color_discrete_sequence = px.colors.qualitative.Vivid,
                              hover_name="Country Name",
                              log_x=True, 
                              log_y=True, 
                              labels="Amount(number of people)",
                              title="Correlation between GDP and number of inbound tourists")
gdp_inbound_plot_pred
#py.plot(gdp_inbound_plot_pred)
#plotly.offline.plot(gdp_inbound_plot_pred, filename="gdp_inbound_plot_pred")

gdp_outbound_plot_pred = px.scatter(gdp_outbound, 
                              x="Outbound", 
                              y="GDP",
                              color_discrete_sequence = px.colors.qualitative.Vivid,
                              hover_name="Country Name",
                              log_x=True, 
                              log_y=True, 
                              labels="Amount(number of people)",
                              title="Correlation between GDP and number of inbound tourists")
gdp_outbound_plot_pred
#py.plot(gdp_outbound_plot_pred)
#plotly.offline.plot(gdp_outbound_plot_pred, filename="gdp_outbound_plot_pred")